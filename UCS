#include <iostream>
#include <vector>
#include <queue>
#include <limits>

using namespace std;

// Structure to represent a graph edge
struct Edge {
    int destination;
    int cost;
};

// Structure to represent a graph node
struct Node {
    int id;
    int costSoFar;
};

// Comparison function for priority queue
struct CompareNode {
    bool operator()(const Node& lhs, const Node& rhs) const {
        return lhs.costSoFar > rhs.costSoFar;
    }
};

class Graph {
private:
    int vertices;
    vector<vector<Edge>> adjacencyList;

public:
    Graph(int v) : vertices(v), adjacencyList(v) {}

    void addEdge(int source, int destination, int cost) {
        Edge edge = {destination, cost};
        adjacencyList[source].push_back(edge);
    }

    void uniformCostSearch(int start, int goal) {
        priority_queue<Node, vector<Node>, CompareNode> pq;

        vector<int> visited(vertices, 0);
        vector<int> parent(vertices, -1);

        pq.push({start, 0});

        while (!pq.empty()) {
            Node currentNode = pq.top();
            pq.pop();

            int currentId = currentNode.id;
            int currentCost = currentNode.costSoFar;

            if (currentId == goal) {
                // Goal node reached, print the path
                cout << "Path from " << start << " to " << goal << ": ";
                int node = goal;
                while (node != -1) {
                    cout << node << " ";
                    node = parent[node];
                }
                cout << endl;
                return;
            }

            if (visited[currentId]) {
                continue;
            }

            visited[currentId] = 1;

            for (const Edge& edge : adjacencyList[currentId]) {
                int neighborId = edge.destination;
                int edgeCost = edge.cost;

                if (!visited[neighborId]) {
                    pq.push({neighborId, currentCost + edgeCost});
                    parent[neighborId] = currentId;
                }
            }
        }

        cout << "Path from " << start << " to " << goal << " not found." << endl;
    }
};

int main() {
    // Example usage
    Graph graph(6);
    graph.addEdge(0, 1, 5);
    graph.addEdge(0, 2, 3);
    graph.addEdge(1, 3, 6);
    graph.addEdge(1, 4, 2);
    graph.addEdge(2, 5, 4);

    int startNode = 0;
    int goalNode = 3;

    graph.uniformCostSearch(startNode, goalNode);

    return 0;
}
